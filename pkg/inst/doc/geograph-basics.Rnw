\documentclass{article}
% \VignettePackage{geoGraph}
% \VignetteIndexEntry{geoGraph: exploratory analyses for the phylogenetic comparative method}

\usepackage{graphicx}
\usepackage[colorlinks=true,urlcolor=blue]{hyperref}
\usepackage{array}
\usepackage{color}

\usepackage[utf8]{inputenc} % for UTF-8/single quotes from sQuote()
\newcommand{\code}[1]{{{\tt #1}}}
\title{\code{geoGraph}: implementing geographic graphs for large-scale spatial modelling}
\author{Thibaut Jombart, Andrea Manica, Fran\ccois Balloux}
\date{\today}




\sloppy
\hyphenpenalty 10000


\begin{document}



\definecolor{Soutput}{rgb}{0,0,0.56}
\definecolor{Sinput}{rgb}{0.56,0,0}
\DefineVerbatimEnvironment{Sinput}{Verbatim}
{formatcom={\color{Sinput}},fontsize=\footnotesize, baselinestretch=0.75}
\DefineVerbatimEnvironment{Soutput}{Verbatim}
{formatcom={\color{Soutput}},fontsize=\footnotesize, baselinestretch=0.75}

\color{black}

\maketitle
\tableofcontents



%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%
\section{Introduction}
%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%

\SweaveOpts{prefix.string = figs/geoGraph, fig = FALSE, eps = FALSE, pdf = TRUE, width = 6, height = 6}


This document describes the \code{geoGraph} package for the R software.
\code{geoGraph} aims at implementing graph approaches for geographic data.
In \code{geoGraph}, a given geographic area is modelled by a fine regular grid, where each vertice
has a set of spatial coordinates and a set of attributes, which can be for instance habitat
descriptors, or the presence/abundance of a given species.
'Travelling' within the geographic area can then be easily modelled as moving between connected vertices.
The costs of moving from one vertex to another can be defined according to attribute values, which
allows for instance to define \emph{frictions} based on habitat.
\\

\code{geoGraph} harnesses the full power of graph algorithms implemented in R by the \code{graph}
and the \code{RBGL} (R Boost Graph Library) packages.
In particular, RBGL is an interface between R and the impressive \emph{Boost Graph Library} in C++,
proposing a wide range of algorithms with fast and efficient implementation.
Therefore, once we have defined frictions for an entire geographic area, we can easily, for instance, find the least
costs path from one node to another, or find the most parsimonious way of connecting a set of locations.
\\

Once all data are set, calling upon RBGL routines is generally straightforward.
However, interfacing spatial data and graphs can be a complicated task.
The purpose of \code{geoGraph} is to simplify these 'preliminary' steps.
This is achieved by defining new classes of objects which are essentially geo-referenced graphs
with attributes (\code{gGraph} objects) and interfaced spatial data (\code{gData} objects).
In this vignette, we show how to install \code{geoGraph}, show how to construct and handle
\code{gGraph}/\code{gData} objects, and illustrate some basic features of graph algorithms.









%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%
\section{First steps}
%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%



%%%%%%%%%%%%%%%%%%%%%
\subsection{Installing the package}
%%%%%%%%%%%%%%%%%%%%%

What is tricky here is that a vignette is basically available once the package
is installed.  Assuming you got this document before installing the package, here are some clues
about installing \code{geoGraph}.  \\

First of all, \code{geoGraph} depends on the packages \code{methods} (base package), \code{graph} (on Bioconductor),
and \code{RBGL} (on Bioconductor).
These dependencies are mandatory, that is, you actually need to
have these packages installed before using \code{geoGraph}.
Also, it is better to make sure you are using the latest versions of these packages.
While the \code{methods} package is part of the basic R release, \code{graph} and \code{RBGL} are
no longer developped on CRAN, although some outdated versions still persist.
To make sure you are using the right version, use the command \code{installDep.geoGraph()} while
connected on the internet.
Do NOT use \code{install.packages}, or related functionalities from the interactive menus.
In all cases, the latest version of \code{geoGraph} can be found from \url{http://r-forge.r-project.org/R/...}.  \\

When loading the package, dependencies are also loaded:
<<load>>=
library(geoGraph)
search()
@

The package is now ready to use.




%%%%%%%%%%%%%%%%%%%%%
\subsection{Data representation}
%%%%%%%%%%%%%%%%%%%%%
Two types of objects are used in \code{geoGraph}: \code{gGraph}, and \g{gData} objects.
Both objects are defined as formal (S4) classes and often have methods for similar generic function
(\textit{e.g.}, getNodes is defined for both objects).
Essentially, \code{gGraph} objects contain underlying layers of informations, including a spatial
grid and possibly node attributes, and covering the area of interest.
\code{gData} are sets of locations -- like sampled sites, for instance -- which have been interfaced
to a \code{gGraph} object, to allow further manipulations such as finding paths on the grid between
pairs of locations.




%%%%%%%%%%%%%%%%%%%%%
\subsubsection{gGraph objects}
%%%%%%%%%%%%%%%%%%%%%
The content of the formal class \code{gGraph} can be obtained using:
<<>>=
getClass("gGraph")
@
and a new empty object can be obtained using the constructor:
<<>>=
new("gGraph")
@
The documentation \code{?gGraph} explains the basics about the object's content.
In a nutshell, these objects are spatial grids with nodes and segments connecting neighbouring
nodes, and additional informations on the nodes or on the graph itself.
\code{coords} is a matrix of longitudes and latitudes of the nodes.
\code{nodes.attr} is a data.frame storing attributes of the nodes, such as habitat descriptors; each
row corresponds to a node of the grid, each column being a variable.
\code{meta} is a list containing miscellanous informations on the graph itself.
There is no contraint in the components of the list, but some components will be recognised by
certain functions.
For instance, you can specify plotting rules for representing a given node attribute by a given
color by defining a component \code{\$colors}.
Similarly, you can associate costs to a given node attribute by defining a component \code{\$costs}.
An example of this can be found in already existing \code{gGraph} objects.
For instance, \code{worldgraph.10k} is a graph of the world with approximately 10,000 nodes, and
only on-land connectivity (\textit{i.e.} no travelling on the seas).
<<>>=
data(worldgraph.10k)
worldgraph.10k
worldgraph.10k@meta
@






%%%%%%%%%%%%%%%%%%%%%
\subsection{Getting started}
%%%%%%%%%%%%%%%%%%%%%
All the material of the package is summarized in a manpage accessible
by typing:
<<eval=FALSE>>=
?geoGraph
@

The html version of this manpage may be preferred to browse easily the content
of \code{geoGraph}; this is accessible by typing:
<<eval=FALSE>>=
help("geoGraph", package="geoGraph", html=TRUE)
@

To revert help back to text mode, simply type:
<<eval=FALSE>>=
options(htmlhelp = FALSE)
@





%%%%%%%%%%%%%%%%%%%%%
\subsection{Putting data into shape}
%%%%%%%%%%%%%%%%%%%%%



% % % % % % % % % % %
\subsubsection{Making a \code{phylo} object}
% % % % % % % % % % %





\end{document}
