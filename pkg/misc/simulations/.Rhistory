temp <- findInLayer(getCoords(worldgraph.40k)[myCandidates,], attr="CONTINENT")
myCandidates <- row.names(temp[temp=="Africa",,drop=FALSE]) # keep nodes in Africa
plot(worldgraph.40k)
points(getCoords(worldgraph.40k)[myCandidates,])
res <- doSimul(myCandidates, hgdp, "outputs") # this can take hours (3 sim/minute)
range(res, na.rm=TRUE)
res.1.2=res
save(res.1.2, file="/home/master/dev/geograph/pkg/misc/simulations/res.1.2.RData")
getwd(0
getwd()
res.1.2
which.max(res.1.2)
dist.phy <- dijkstraBetween(hgdp)
dist.phy <- dijkstraBetween(hgdpPlus)
save(dist.phy, "dist.phy.RData")
save(dist.phy, file="dist.phy.RData")
fst
fst <- read.csv("/home/master/dev/geograph/pkg/misc/HGDP/76pop.fst")
dim(fst)
dim(dist.phy)
dim(as.matrix(dist.phy))
class(dist.phy)
length(dist.phy)
dist.phy[[1]]
sapply(dist.phy, function(e) sum(e$length_detail))
pairPath <- dist.phy
pairPath <- dijkstraBetween(hgdpPlus) # takes around 20 minutes

pairPath <- dist.phy
save(pairPath, file="pairPath.RData")
dist.phy <- sapply(dist.phy, function(e) sum(e$length_detail))
dist.phy <- sapply(dist.phy[], function(e) sum(e$length_detail))
dist.phy <- sapply(pairPath, function(e) sum(e$length_detail))
pairPath[[1]]$length_detail
length(pairPath)
pairPath[[2492]]$length_detail
pairPath[[2492]]
dist.phy <- sapply(pairPath[-length(pairPath)], function(e) sum(e$length_detail))
dist.phy <- sapply(pairPath[-length(pairPath)], function(e) sum(e$length_detail) )
dist.phy <- sapply(pairPath[-length(pairPath)], function(e) sum(e$length_details) )
head(dist.phy)
pairPath[[1]]$length_details
pairPath[[1]]$length_detail
dist.phy <- sapply(pairPath[-length(pairPath)], function(e) sum(e$length_detail) )
dist.phy <- lapply(pairPath[-length(pairPath)], function(e) sum(e$length_detail) )
dist.phy <- lapply(pairPath[1:2], function(e) sum(e$length_detail) )
dist.phy <- lapply(pairPath[1:2], function(e) sum(e$length_detail) )
pairPath[[1]]$length_detail
pairPath[[1]]$length_detail[[1]]
dist.phy <- sapply(pairPath[-length(pairPath)], function(e) sum(e$length_detail[[1]]) )
head(dist.phy)
fst <- read.table("/home/master/dev/geograph/pkg/misc/HGDP/76pop.fst")
dim(fst)
?dist
as.dist(1:9)
as.dist(1:8)
as.dist(1:7)
as.dist(1:6)
as.dist(1:4)
as.dist(1:3)
toto <- as.dist(1:4)
str(toto)
unclass(toto)
toto
toto[1]
as.dist(1:6)
toto <- as.dist(1:6)
toto
unclass(toto)
attr(dist.phy , "Size") <- 76
attr(dist.phy , "Diag") <- FALSE
attr(dist.phy , "Upper") <- FALSE
class(toto)
class(dist.phy) <- "dist"
dist.phy
plot(dist.phy~fst)
plot(as.matrix(dist.phy)~fst)
plot(unclass(as.matrix(dist.phy))~unclass(fst))
hgdpPlus
unclass(toto)
toto <- matrix(1:9,ncol=3)
str(toto)
toto <- as.dist(toto)
str(toto)
toto
dist(1:3)
toto <- dist(1:4)
toto
str(toto)
temp <- dist(1:76)
attributes(toto)
attributes(toto)
dist.phy <- sapply(pairPath[-length(pairPath)], function(e) sum(e$length_detail[[1]]) )

attributes(dist.phy) <- attributes(temp)
dist.phy
 dist.phy <- sapply(pairPath[-length(pairPath)], function(e) sum(e$length_detail[[1]]) )

dist.phy
length(dist.phy)
76*75/2
length(pairPath)
length(pairPath)
75*74/2
74*73/2
73*72/2
72*71/2
702*71/2
72*71/2
70*71/2
q()
n
library(geoGraph)
data(hgdp)
data(hgdpPlus)
data(worldgraph.40k)

setwd("/home/master/dev/geograph/pkg/misc/simulations/")
source("doSimul.R")



##
## COMPUTE COSTS
##

## load costs
load("/home/master/dev/geograph/pkg/misc/simulations/costsFromLm3.RData")

palette(105)
plot(worldgraph.40k, col=max(myCosts) - myCosts)

palette(heat.colors(105))
plot(worldgraph.40k, col=max(myCosts) - myCosts)

plot(worldgraph.40k, col=max(myCosts) - myCosts)
range(myCosts)
plot(worldgraph.40k, col= 10 - myCosts)
plot(worldgraph.40k, col= 100 - myCosts)
plot(worldgraph.40k, col= myCosts)
worldgraph.40k <- setFriction(worldgraph.40k, node.costs=myCosts)
worldgraph.40k <- dropDeadEdges(worldgraph.40k, thres=2e5)

isConnected(hgdpPlus)

isConnected(hgdp)

addis <- list(lon=38.74,lat=9.03)
addis <- closestNode(worldgraph.40k,addis) # this takes a while
doSimul(addis,hgdp, ".") # result: R2=

addis <- list(lon=38.74,lat=9.03)
addis <- closestNode(worldgraph.40k,addis) # this takes a while
doSimul(addis,hgdp, ".") # result: R2=
myPath <- dijkstraFrom(hgdp,addis)
traceback()
hgdp
addis
setMethod("dijkstraFrom", "gGraph", function(x, start){

    ## some checks ##
    if(!require(RBGL)) stop("RBGL is required.")
    if(!is.gGraph(x)) stop("x is not a valid gGraph object")
    if(!all(start %in% getNodes(x))) stop("Starting node is not in x.")

    ## check connectivity ##
    if(!areConnected(myGraph, getNodes(myGraph))) stop("Not all nodes are connected by the graph.")

    ## build the wrapper ##
    myGraph <- getGraph(x)
    ##  if(is.character(costs) && costs=="default"){
    ##         costs <- unlist(edgeWeights(myGraph))
    ##     }

    ## wrap ##
    res <- dijkstra.sp(myGraph, start=start)

    ## sp.between uses unique(x@nodes.id) ##
    ## eventually have to duplicate paths ##
    temp <- gsub(".*:","",names(res))
    res <- res[match(getNodes(x), temp)]


    ## make it a class "gPath" (output + xy coords) ##
    allNodes <- unique(unlist(lapply(res, function(e) e$path_detail)))
    res$xy <- getCoords(x)[allNodes,]
   ## attr(res,"xy") <- getCoords(x)[allNodes,]
    class(res) <- "gPath"

    return(res)
}) # end dijkstraFrom for gGraph


myPath <- dijkstraFrom(hgdp,addis)
traceback()
myPath <- dijkstraFrom(hgdpPlus,addis)
worldgraph.40k <- dropCosts(worldgraph.40k)
myPath <- dijkstraFrom(hgdpPlus,addis)
x <- hgdp
start <- addis
    myGraph <- getGraph(x)

    res <- dijkstra.sp(myGraph, start=start)

   temp <- gsub(".*:","",names(res))
    res <- res[match(getNodes(x), temp)]

    allNodes <- unique(unlist(lapply(res, function(e) e$path_detail)))

    attr(res,"xy") <- getCoords(x)[allNodes,]

    class(res) <- "gPath"

res
 myGraph <- getGraph(x)
    ##  if(is.character(costs) && costs=="default"){
    ##         costs <- unlist(edgeWeights(myGraph))
    ##     }

    ## wrap ##
    res <- dijkstra.sp(myGraph, start=start)

    ## sp.between uses unique(x@nodes.id) ##
    ## eventually have to duplicate paths ##
    temp <- gsub(".*:","",names(res))
    res <- res[match(getNodes(x), temp)]


    ## make it a class "gPath" (output + xy coords) ##

res
 myGraph <- getGraph(x)
    ##  if(is.character(costs) && costs=="default"){
    ##         costs <- unlist(edgeWeights(myGraph))
    ##     }

    ## wrap ##
    res <- dijkstra.sp(myGraph, start=start)

res
q()
n
